package com.company;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

/**
 * Created by ArO on 9/09/2016.
 */
public class ClientGUI {
    private JButton serverFilesButton;
    private JPanel mainPanel;
    private JList<String> fileList;
    private JButton downloadFileButton;
    private JButton openFilesButton;
    private JLabel textLabel;
    private JScrollPane fileScrollPane;
    private DefaultListModel<String> listModel;
    Client thisClient;

    public ClientGUI(Client client) {
        thisClient = client;
        JFrame mainFrame = new JFrame("Client GUI");
        mainFrame.setContentPane(this.mainPanel);
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.pack();
        mainFrame.setVisible(true);
        mainFrame.setSize(450, 300);

        listModel = new DefaultListModel<>();
        fileList.setModel(listModel);
        if (!Desktop.isDesktopSupported()) {
            System.out.println("find another way to open a file lol");
        }
        Desktop desktop = Desktop.getDesktop();

        serverFilesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listModel.clear();
                thisClient.getFileNames();
                addFilesToList();

            }
        });
        downloadFileButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (fileList.isSelectionEmpty()) {
                    JOptionPane.showMessageDialog(null, "No file is selected, please select a file to");
                    return;
                }

                int currentIndex = fileList.getSelectedIndex() * 2;
                thisClient.getFile(thisClient.fileNames.get(currentIndex), Integer.parseInt(thisClient.fileNames.get(currentIndex + 1)));
            }
        });
        openFilesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (fileList.isSelectionEmpty()) {
                    JOptionPane.showMessageDialog(null, "No file is selected, please select a file to open");
                    return;
                }
                int currentIndex = fileList.getSelectedIndex() * 2;
                String fileName = thisClient.fileDir + thisClient.fileNames.get(currentIndex);


                File currentFile = new File(fileName);
                if (currentFile.exists()) {
                    try {
                        desktop.open(currentFile);
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "This file has not been downloaded, please download it first");
                    return;
                }
            }
        });
    }

    public void addFilesToList() {
        fileList.clearSelection();
        if (thisClient.fileNames.size() < 2) {
            JOptionPane.showMessageDialog(null, "No files on the server");
            return;
        }
        for (int i = 0; i < thisClient.fileNames.size(); i = i + 2) {
            listModel.addElement(thisClient.fileNames.get(i));
        }
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        serverFilesButton = new JButton();
        serverFilesButton.setText("Show current server files");
        mainPanel.add(serverFilesButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        downloadFileButton = new JButton();
        downloadFileButton.setText("Download Selected File");
        mainPanel.add(downloadFileButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openFilesButton = new JButton();
        openFilesButton.setText("Open Downloaded Files");
        mainPanel.add(openFilesButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textLabel = new JLabel();
        textLabel.setText("Files on the server");
        mainPanel.add(textLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileScrollPane = new JScrollPane();
        mainPanel.add(fileScrollPane, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fileList = new JList();
        fileScrollPane.setViewportView(fileList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
